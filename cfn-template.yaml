---
Parameters:
  AwsRegionName:
    Type: String
    Default: us-east-1
  TagName:
    Type: String
    Default: MakeSnapshot
  TagValue:
    Type: String
    Default: true
  TagType:
    Type: String
    Default: volume
  RunningOnly:
    Type: String
    Default: ""
  KeepDay:
    Type: Number
    Default: 7
  KeepWeek:
    Type: Number
    Default: 4
  KeepMonth:
    Type: Number
    Default: 12
  KeepYear:
    Type: Number
    Default: 9999
  SkipCreate:
    Type: String
    Default: ""
  SkipDelete:
    Type: String
    Default: ""
  S3Bucket:
    Type: String
  S3Key:
    Type: String
Resources:
  Makesnap3Policy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # DescribeAvailabilityZones allow only needed if you are tagging instances rather than volumes
          -
            Effect: Allow
            Action: "ec2:DescribeAvailabilityZones"
            Resource: "*"
          -
            Effect: Allow
            Action:
              - "ec2:CreateSnapshot"
              - "ec2:CreateTags"
              - "ec2:DeleteSnapshot"
              - "ec2:DescribeSnapshots"
              - "ec2:DescribeInstances"
              - "ec2:DescribeTags"
              - "ec2:DescribeVolumeAttribute"
              - "ec2:DescribeVolumeStatus"
              - "ec2:DescribeVolumes"
            Resource: "*"
  
  Makesnap3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action: "sts:AssumeRole"
          Principal:
            Service: "lambda.amazonaws.com"
      ManagedPolicyArns:
        - !Ref Makesnap3Policy
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  
  Makesnap3Function:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      Handler: "makesnap3.lambda_handler"
      MemorySize: "128"
      Role: !GetAtt Makesnap3Role.Arn
      Runtime: "python2.7"
      Timeout: "300"
      Environment:
        Variables:
          makesnap_ec2_region_name: !Ref AwsRegionName
          makesnap_tag_name: !Ref TagName
          makesnap_tag_value: !Ref TagValue
          makesnap_tag_type: !Ref TagType
          makesnap_running_only: !Ref RunningOnly
          makesnap_keep_day: !Ref KeepDay
          makesnap_keep_week: !Ref KeepWeek
          makesnap_keep_month: !Ref KeepMonth
          makesnap_keep_year: !Ref KeepYear
          makesnap_skip_create: !Ref SkipCreate
          makesnap_skip_delete: !Ref SkipDelete

  # Makesnap3HourlyRule:
  #   Type: "AWS::Events::Rule"
  #   Properties:
  #     ScheduleExpression: cron(15 */8 * * ? *)"
  #     Targets:
  #       -
  #         Arn: !GetAtt Makesnap3Function.Arn
  #         Id: "1"
  #         Input: "{\"period\": \"day\"}"
  #
  # Makesnap3HourlyPermission:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     FunctionName: !Ref Makesnap3Function
  #     Action: "lambda:InvokeFunction"
  #     Principal: "events.amazonaws.com"
  #     SourceArn: !GetAtt Makesnap3HourlyRule.Arn
  
  Makesnap3DailyRule:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "cron(30 1 ? * MON-SAT *)"
      Targets:
        -
          Arn: !GetAtt Makesnap3Function.Arn
          Id: "1"
          Input: "{\"period\": \"day\"}"
  
  Makesnap3DailyPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Makesnap3Function
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt Makesnap3DailyRule.Arn
  
  Makesnap3WeeklyRule:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "cron(30 2 ? * SUN *)"
      Targets:
        -
          Arn: !GetAtt Makesnap3Function.Arn
          Id: "1"
          Input: "{\"period\": \"week\"}"
  
  Makesnap3WeeklyPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Makesnap3Function
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt Makesnap3WeeklyRule.Arn
  
  Makesnap3MonthlyRule:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "cron(30 3 1 * ? *)"
      Targets:
        -
          Arn: !GetAtt Makesnap3Function.Arn
          Id: "1"
          Input: "{\"period\": \"month\"}"
  
  Makesnap3MonthlyPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Makesnap3Function
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt Makesnap3MonthlyRule.Arn
  
  Makesnap3YearlyRule:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "cron(30 4 1 1 ? *)"
      Targets:
        -
          Arn: !GetAtt Makesnap3Function.Arn
          Id: "1"
          Input: "{\"period\": \"year\"}"
  
  Makesnap3YearlyPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Makesnap3Function
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt Makesnap3YearlyRule.Arn
